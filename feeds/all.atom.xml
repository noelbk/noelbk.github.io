<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Noel Burton-Krahn</title><link href="http://burton-krahn.com/" rel="alternate"></link><link href="http://burton-krahn.com/feeds/all.atom.xml" rel="self"></link><id>http://burton-krahn.com/</id><updated>2017-06-22T00:00:00-07:00</updated><entry><title>Communicating with vegtative patients</title><link href="http://burton-krahn.com/communicating-with-vegtative-patients.html" rel="alternate"></link><published>2017-06-22T00:00:00-07:00</published><updated>2017-06-22T00:00:00-07:00</updated><author><name>Noel Burton-Krahn</name></author><id>tag:burton-krahn.com,2017-06-22:/communicating-with-vegtative-patients.html</id><summary type="html">&lt;p&gt;Imagine if you were completely conscious but couldn't move or speak?
&lt;a href="http://www.owenlab.uwo.ca/"&gt;Neuroscientist Adrian Owen&lt;/a&gt; has been
using brain-imaging techniques to detect consciousness in patients who
are presumed to be vegetative, sometimes for many years. By giving
simple commands and then measuring brain activity, Owen has learned
some patients are completely …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Imagine if you were completely conscious but couldn't move or speak?
&lt;a href="http://www.owenlab.uwo.ca/"&gt;Neuroscientist Adrian Owen&lt;/a&gt; has been
using brain-imaging techniques to detect consciousness in patients who
are presumed to be vegetative, sometimes for many years. By giving
simple commands and then measuring brain activity, Owen has learned
some patients are completely aware despite being entirely unable to
communicate or move their limbs.&lt;/p&gt;
&lt;h2&gt;&lt;a href="http://www.owenlab.uwo.ca/news_media/tv/documentaries.html"&gt;The Owen Lab - Documentaries&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kate's Story
  May 3, 2008&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/A04AvsGH0FU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How we did it - communicating with a patient presumed to be in a vegetative state for 12 years
  Nov 19, 2012&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/QOWNvi06Agc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The quest for consciousness: Adrian Owen at TEDxUWO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/lvUvY_JrUgA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;  &lt;/p&gt;
&lt;h2&gt;News Articles&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.theglobeandmail.com/technology/science/vegetative-patient-shows-he-is-aware-of-his-identity-whereabouts/article13721597/"&gt;Vegetative patient shows he is aware of his identity, whereabouts&lt;/a&gt;
Aug. 12, 2013&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] one of three vegetative patients to correctly answer questions
such as, “Are you in a hospital?” and “Is your name Mike?” posed
using a new, more effective technique of magnetic resonance imaging
(MRI). His responses are a leap forward in communications with
unresponsive patients, building on a breakthrough contact that
researchers achieved with him in 2012 using a more primitive
technique.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(Canadian patient in 'vegetative state' able to communicate)[
https://www.theglobeandmail.com/life/the-hot-button/canadian-patient-in-vegetative-state-able-to-communicate/article5227276/]
Nov. 13, 2012&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Because each of those thoughts activated different parts of the
brain, British neuroscientist Adrian Owen, who led the team, says
Routley was able to communicate clearly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.theglobeandmail.com/life/health-and-fitness/vegetative-patient-now-able-to-give-thumbs-up-fuelling-debate/article1390975/"&gt;Vegetative patient now able to give 'thumbs up,' fuelling debate&lt;/a&gt;
Apr. 24, 2012&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A hospital patient deemed vegetative is now able to make a “thumbs
up” gesture – a sign to family that he is aware, but not yet strong
enough to persuade doctors to drop a recommendation to withdraw life
support.&lt;/p&gt;
&lt;p&gt;A leading neuroscientist, Adrian Owen, travelled to Mr. Rasouli’s
bedside at Sunnybrook on Tuesday, to conduct investigations to
determine whether he can communicate.&lt;/p&gt;
&lt;p&gt;His investigations come on the heels of a study he published in the
medical journal The Lancet, revealing that 19 per cent of patients
believed to be in an irreversible vegetative state showed signs of
full consciousness when tested with an electroencephalography
machine.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="prolira"></category><category term="eeg"></category><category term="mri"></category></entry><entry><title>Deep Learning for Medicine</title><link href="http://burton-krahn.com/deep-learning-for-medicine.html" rel="alternate"></link><published>2017-04-30T00:00:00-07:00</published><updated>2017-04-30T00:00:00-07:00</updated><author><name>Noel Burton-Krahn</name></author><id>tag:burton-krahn.com,2017-04-30:/deep-learning-for-medicine.html</id><summary type="html">&lt;p&gt;Machine learning has made great strides in the last few years, and
&lt;a href="http://cs231n.github.io/convolutional-networks/"&gt;Convolutional Neural Networks&lt;/a&gt; have demonstrated
some very impressive results in image and speech processing.  There
are some great opportunities to apply them to healthcare, but there
are some significant challenges too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/the-mission/deep-learning-in-healthcare-challenges-and-opportunities-d2eee7e2545"&gt;Deep Learning in Healthcare: Challenges and Opportunities …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Machine learning has made great strides in the last few years, and
&lt;a href="http://cs231n.github.io/convolutional-networks/"&gt;Convolutional Neural Networks&lt;/a&gt; have demonstrated
some very impressive results in image and speech processing.  There
are some great opportunities to apply them to healthcare, but there
are some significant challenges too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/the-mission/deep-learning-in-healthcare-challenges-and-opportunities-d2eee7e2545"&gt;Deep Learning in Healthcare: Challenges and Opportunities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regulatory approval requires a deeper understanding of the network
than just black boxes, and there is new mathementics being developed
to do just that.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://rsta.royalsocietypublishing.org/content/374/2065/20150203"&gt;Understanding deep convolutional networks&lt;/a&gt;
  Stéphane Mallat
  Published 7 March 2016.DOI: 10.1098/rsta.2015.0203&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://matthewhirn.wordpress.com/portfolio/scattering-transforms/"&gt;Matthew Hirn, Scattering Transforms&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Deep learning architectures have recently reemerged with the advent
of new computational resources and algorithmic improvements. They
are yielding remarkable state of the art results in numerous
learning tasks, primarily in computer vision for the analysis of
images, speech recognition, and natural language processing [...]
However, the complexity of such algorithms means that they have
remained essentially a black box, yielding proportionally little
insight given their performance achievements, which limits their
utility in fields outside of those traditionally tackled by the
machine learning community and obstructs new scientific
directions. My research aims to open this blackbox by utilizing
tools from harmonic analysis to construct multiscale deep learning
architectures amenable to mathematical analysis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Despite the challenges, devices based on neural networks have recently
been granted FDA approval, and there are many startups emerging in
this space.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.prnewswire.com/news-releases/arterys-receives-fda-clearance-for-the-first-zero-footprint-medical-imaging-analytics-cloud-software-with-deep-learning-for-cardiac-mri-300387880.html"&gt;Arterys Receives FDA Clearance For The First Zero-Footprint Medical Imaging Analytics Cloud Software With Deep Learning For Cardiac MRI&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.fiercebiotech.com/medical-devices/arterys-nabs-second-fda-ok-for-deep-learning-image-analysis-software"&gt;Arterys nabs second FDA OK for deep learning, image analysis software&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.google.ca/amp/www.nanalyze.com/2017/02/artificial-intelligence-medical-imaging/amp/"&gt;9 Artificial Intelligence Startups in Medical Imaging&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="nnet"></category><category term="fda"></category></entry><entry><title>Battlesnakes</title><link href="http://burton-krahn.com/battlesnakes.html" rel="alternate"></link><published>2017-03-10T00:00:00-08:00</published><updated>2017-03-10T00:00:00-08:00</updated><author><name>Noel Burton-Krahn</name></author><id>tag:burton-krahn.com,2017-03-10:/battlesnakes.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Genetic_programming"&gt;Genetic programming&lt;/a&gt; for
the win! This is my entry into the
2017 &lt;a href="http://battlesnake.io"&gt;Battlesnake&lt;/a&gt; competition.&lt;/p&gt;
&lt;div&gt;
&lt;a href="https://cdn.rawgit.com/noelbk/genetisnake/abc247e/html/snake.html"&gt;
See them in action!
&lt;img src="https://raw.githubusercontent.com/noelbk/genetisnake/master/html/images/board2.png" width="322px" height="250px" /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/noelbk/genetisnake"&gt;Git repo&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Genetic_programming"&gt;Genetic programming&lt;/a&gt; for
the win! This is my entry into the
2017 &lt;a href="http://battlesnake.io"&gt;Battlesnake&lt;/a&gt; competition.&lt;/p&gt;
&lt;div&gt;
&lt;a href="https://cdn.rawgit.com/noelbk/genetisnake/abc247e/html/snake.html"&gt;
See them in action!
&lt;img src="https://raw.githubusercontent.com/noelbk/genetisnake/master/html/images/board2.png" width="322px" height="250px" /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/noelbk/genetisnake"&gt;Git repo&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>If a number is divisible by 3, then so is the sum of its digits</title><link href="http://burton-krahn.com/if-a-number-is-divisible-by-3-then-so-is-the-sum-of-its-digits.html" rel="alternate"></link><published>2016-10-03T00:00:00-07:00</published><updated>2016-10-03T00:00:00-07:00</updated><author><name>Noel Burton-Krahn</name></author><id>tag:burton-krahn.com,2016-10-03:/if-a-number-is-divisible-by-3-then-so-is-the-sum-of-its-digits.html</id><summary type="html">&lt;p&gt;A toy proof of a math trick I learned in elementary school.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Preamble&lt;/h1&gt;
&lt;p&gt;This is a toy proof of a math trick I learned in elementary school.
It's really Just an excuse to play with
&lt;a href="https://www.latex-project.org/"&gt;&lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This document is also available as
&lt;a href="http://burton-krahn.com/static/div3digits.pdf"&gt;PDF&lt;/a&gt; and &lt;span class="math"&gt;\(\LaTeX\)&lt;/span&gt;
&lt;a href="http://burton-krahn.com/static/div3digits.tex"&gt;source&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;There was a trick we learned in elementary school: if the sum of the
digits of a number is divisible by 3, then the number itself is
divisble by 3.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Is &lt;span class="math"&gt;\(54,321\)&lt;/span&gt; divisible by &lt;span class="math"&gt;\(3\)&lt;/span&gt;?  The sum of digits &lt;span class="math"&gt;\(5 + 4 + 3
+ 2 + 1 = 15\)&lt;/span&gt;, which is divisible by &lt;span class="math"&gt;\(3\)&lt;/span&gt;, so &lt;span class="math"&gt;\(54,321\)&lt;/span&gt; should be divisible
by &lt;span class="math"&gt;\(3\)&lt;/span&gt; according to this rule, and yes, &lt;span class="math"&gt;\(54,321 = 3 \cdot 18,107\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Is that true for all numbers?&lt;/p&gt;
&lt;h1&gt;Proving it&lt;/h1&gt;
&lt;p&gt;We write numbers as strings of decimal digits like so:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
  54,321 &amp;amp; = 5 \cdot 10,000 + 4 \cdot 1,000 + 3 \cdot 100 + 2 \cdot 10 + 1 \\
         &amp;amp; = 5 \cdot 10^4   + 4 \cdot 10^3 + 3 \cdot 10^2 + 2 \cdot 10^1 + 1 \cdot 10^0
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;More precisely, we write an integer &lt;span class="math"&gt;\(D\)&lt;/span&gt; as a string of decimal digits:
&lt;span class="math"&gt;\(d_{n-1},{\ldots},d_1,d_0\)&lt;/span&gt;, which represents the equation:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
  D &amp;amp; = d_{n-1} 10^{n-1} + \cdots + d_1 10^1 + d_0 10^0 \\
    &amp;amp; = \sum_{i=0}^{n-1} d_i 10^i
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;Given that definition of the digits of a number, we can prove the
theorem.  First, a couple of mini-theorems:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma 1:&lt;/strong&gt; For all integer polynomials, &lt;span class="math"&gt;\((x+1)^n = x k_n + 1\)&lt;/span&gt; for
some integer &lt;span class="math"&gt;\(k_n\)&lt;/span&gt;.  In other words, &lt;span class="math"&gt;\((x+1)^n - 1\)&lt;/span&gt; is divisible by
&lt;span class="math"&gt;\(x\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proof:&lt;/strong&gt; By induction. First the base case where &lt;span class="math"&gt;\(n=0\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
    (x+1)^0 &amp;amp; = 1 \\
            &amp;amp; = x \cdot 0 + 1
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;So for the base base, &lt;span class="math"&gt;\(k_0 = 0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now, the inductive step.  Assuming &lt;span class="math"&gt;\(n\)&lt;/span&gt;, prove &lt;span class="math"&gt;\(n+1\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
(x+1)^{n+1} &amp;amp; = (x + 1)(x + 1)^n \\
           &amp;amp; = (x + 1)(x k_n + 1) &amp;amp;&amp;amp; \text{assuming $n$: $(x+1)^n = x k_n + 1$} \\
           &amp;amp; = x x k_n + x + x k_n + 1 \\
           &amp;amp; = x(x k_n + k_n + 1) + 1 \\
           &amp;amp; = x(k_{n+1}) + 1 &amp;amp;&amp;amp; \text{where $k_{n+1} = x k_n + k_n + 1$}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;We've proven the &lt;span class="math"&gt;\(n+1\)&lt;/span&gt; case: &lt;span class="math"&gt;\((x+1)^{n+1} = x k_{n+1} + 1\)&lt;/span&gt;, and by
induction this is be true for all &lt;span class="math"&gt;\(n \ge 0\)&lt;/span&gt;.
&lt;span class="math"&gt;\(\square\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma 2:&lt;/strong&gt; If &lt;span class="math"&gt;\(D = p k + q\)&lt;/span&gt;, then &lt;span class="math"&gt;\(D\)&lt;/span&gt; is divisible by &lt;span class="math"&gt;\(p\)&lt;/span&gt; if and
only if &lt;span class="math"&gt;\(q\)&lt;/span&gt; is divisible by &lt;span class="math"&gt;\(p\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proof: &lt;/strong&gt; Assume &lt;span class="math"&gt;\(q\)&lt;/span&gt; is divisible by &lt;span class="math"&gt;\(p\)&lt;/span&gt;.  Then, &lt;span class="math"&gt;\(q = p j\)&lt;/span&gt; for some
integer &lt;span class="math"&gt;\(j\)&lt;/span&gt;, and&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*} 
D &amp;amp; = p k + q \\
  &amp;amp; = p k + p j \\
  &amp;amp; = p (k + j)
\end{align*} 
$$&lt;/div&gt;
&lt;p&gt;thus &lt;span class="math"&gt;\(D\)&lt;/span&gt; is divisible by &lt;span class="math"&gt;\(p\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now, assume &lt;span class="math"&gt;\(q\)&lt;/span&gt; is {\bf not} divisible by &lt;span class="math"&gt;\(p\)&lt;/span&gt;.  Then, &lt;span class="math"&gt;\(q = p j + r\)&lt;/span&gt; for some &lt;span class="math"&gt;\(0 &amp;lt; r &amp;lt; p\)&lt;/span&gt;, and &lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*} 
D &amp;amp; = p k + q \\
  &amp;amp; = p k + p j + r \\
  &amp;amp; = p (k + j) + r
\end{align*} 
$$&lt;/div&gt;
&lt;p&gt;and since &lt;span class="math"&gt;\(0 &amp;lt; r &amp;lt; p\)&lt;/span&gt;, &lt;span class="math"&gt;\(D\)&lt;/span&gt; is {\bf not} divisible by &lt;span class="math"&gt;\(p\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Thus &lt;span class="math"&gt;\(D = p k + q\)&lt;/span&gt; is divisible by &lt;span class="math"&gt;\(p\)&lt;/span&gt; if and only if &lt;span class="math"&gt;\(q\)&lt;/span&gt; is divisible by &lt;span class="math"&gt;\(p\)&lt;/span&gt;.
&lt;span class="math"&gt;\(\square\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now we can get back to the main theorem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem:&lt;/strong&gt; If an integer &lt;span class="math"&gt;\(D\)&lt;/span&gt; is written as a string of digits
&lt;span class="math"&gt;\(d_{n-1},\ldots,d_1,d_0\)&lt;/span&gt; where &lt;span class="math"&gt;\(D = \sum_{i=0}^{n-1} d_i 10^i\)&lt;/span&gt;, then
&lt;span class="math"&gt;\(D\)&lt;/span&gt; is divisible by 3 if and only if the sum of its digits &lt;span class="math"&gt;\(S =
\sum_{i=0}^{n-1} d_i\)&lt;/span&gt; is divisible by 3.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proof:&lt;/strong&gt; The proof uses the simple fact that &lt;span class="math"&gt;\(10 = (9 + 1)\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}    
D &amp;amp; = \sum_{i=0}^{n-1} d_i 10^i \\
  &amp;amp; = \sum_{i=0}^{n-1} d_i (9+1)^i \\
  &amp;amp; = \sum_{i=0}^{n-1} d_i (9k_i+1) &amp;amp;&amp;amp; \text{by Lemma 1}\\
  &amp;amp; = 9\sum_{i=0}^{n-1} d_i k_i + \sum_{i=0}^{n-1} d_i\\
  &amp;amp; = 9k + S &amp;amp;&amp;amp; \text{where $S$ is the sum of the digits of $D$}
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;So &lt;span class="math"&gt;\(D = 9k + S\)&lt;/span&gt;, and by Lemma 2, &lt;span class="math"&gt;\(D\)&lt;/span&gt; is divisible by 9 if and only if
the sum of its digits, &lt;span class="math"&gt;\(S = \sum_{i=0}^{n-1} d_i\)&lt;/span&gt; is also divisible by
9.  That's an interesting result, but we were trying to prove that
statement for 3.  However, since &lt;span class="math"&gt;\(9 = 3 \cdot 3\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}    
D &amp;amp; = 9k + S \\
  &amp;amp; = 3 \cdot 3 k + S \\
  &amp;amp; = 3 j + S
\end{align*}
$$&lt;/div&gt;
&lt;p&gt;Lemma 2 works again to prove that &lt;span class="math"&gt;\(D\)&lt;/span&gt; is divisible by 3 if and only if
the sum of its digits, &lt;span class="math"&gt;\(S = \sum_{i=0}^{n-1} d_i\)&lt;/span&gt; is also divisible by
3.
&lt;span class="math"&gt;\(\square\)&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;This proof used the fact that we write integers in base 10, and &lt;span class="math"&gt;\(10 =
(9+1)\)&lt;/span&gt;, and thus if the sum of a number's digits in base 10 is
divisible by 9 or 3, then so is the number itself.  This works for
other bases too.  For example, if the number's digits are in base 8,
this rule will work for all divisors of &lt;span class="math"&gt;\(8 - 1 = 7\)&lt;/span&gt;.  For example,
&lt;span class="math"&gt;\(5432_8 = 2842_{10} = 7 \cdot 406_{10}\)&lt;/span&gt;, and &lt;span class="math"&gt;\(5+4+3+2 =
14_{10}\checkmark\)&lt;/span&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content></entry><entry><title>Emacs Advanced Features Tutorial</title><link href="http://burton-krahn.com/emacs-advanced-features-tutorial.html" rel="alternate"></link><published>2015-08-27T00:00:00-07:00</published><updated>2015-08-27T00:00:00-07:00</updated><author><name>Noel Burton-Krahn</name></author><id>tag:burton-krahn.com,2015-08-27:/emacs-advanced-features-tutorial.html</id><summary type="html">&lt;p&gt;The good bits of Emacs, after the online tutorial without too much kool-aid&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Emacs Advanced Features Tutorial&lt;/h2&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Depending on who you ask, Emacs is either an advanced text editor, a
lisp-based operating system, or a program cleverly designed to tie
your fingers into knots.  It's a bit of all of the above.  I encourage
programmers to give it a try, but there seems to be a mythos around
Emacs that it's too complicated to learn.  This is an advanced
tutorial about Emacs.  I'll skip over most of the basics and get into
more of the really advanced features that make it actually useful.&lt;/p&gt;
&lt;h2&gt;Conventions&lt;/h2&gt;
&lt;p&gt;Emacs is a lisp operating system with an editor bolted on top.  All
the functions of Emacs are written in Lisp, and there are a lot of
them.  There are functions for colorizing and indenting programming
languages, reading email, games, etc.  More on that later.&lt;/p&gt;
&lt;p&gt;Emacs functions are bound to keys.  There are lots of key
combinations, so be prepared for some finger flexibility conditioning.
Here's how key bindings are represented in Emacs documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-&amp;quot;      - Means hold contol, then type a key
&amp;quot;M-&amp;quot;      - Means type escape, then type a key.
            Emacs calls this the &amp;quot;meta&amp;quot; key.
&amp;quot;C-f&amp;quot;     - means hold control, press f, release
&amp;quot;C-u C-f&amp;quot; - means hold control, press u, release, hold control,
            press f, release
&amp;quot;C-u f&amp;quot;   - means hold control, press u, release, type h
&amp;quot;M-f&amp;quot;     - means press Escape, release, type f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Emacs has an extensive online help system which I highly recommend to
you... in a bit.  Reviewing the tutorial now, I can see where the
mythos about weird key combos came from.  Emacs goes back to Richard
Stallman's Editor MaCroS in 1976, before keyboards had standard cursor
movement keys, so the tutorial starts with a long section on cursor
movement using weird key bindings like "C-f", "C-b", "C-v", etc.
Ignore all that.  The standard cursor movement keys work.  Feel free
to take a detour to the tutorial now with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-h t&amp;quot; - Emacs tutorial
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;... Welcome back!  I'll start with some basic commands first if you
skipped the tutorial, but you can get back to it any time with "C-h
t".&lt;/p&gt;
&lt;h2&gt;Before We Begin&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download this whole repo from github&lt;/p&gt;
&lt;p&gt;git clone &lt;a href="https://github.com/noelbk/emacstut"&gt;https://github.com/noelbk/emacstut&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;cd emacstut&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install this .emacs startup file.  I added a couple of simple
   keybindings.&lt;/p&gt;
&lt;p&gt;cp -i dot-emacs ~/.emacs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reopen this tutorial in Emacs&lt;/p&gt;
&lt;p&gt;emacs README.md&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Basic Commands&lt;/h2&gt;
&lt;p&gt;Safety first:  In case you need to quit emacs (not yet, though!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-x C-c&amp;quot; - quit emacs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and in case you get stuck in a command, or Emacs becomes unresponsive
because a command's taking too long, you can always break out of the
current command with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-g&amp;quot; - quit current function
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now on to editing files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-x C-f&amp;quot; - open a file in a new buffer

&amp;quot;C-x k&amp;quot; - kill buffer (close file)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wait! don't open a new file until you know how to get back here.  Let
me tell you about buffers first.  Emacs opens files in buffers, and
displays buffers in windows.  Let's do a quick experiment in Emacs
(you &lt;em&gt;are&lt;/em&gt; reading this file in Emacs, right?) to make sure you know
how to open a new buffer, display it, and get back.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Type "C-x 4 f hellotut.c" to open hellotut.c in a new window.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Notice how the screen is split now with hellotut.c below this
   tutorial.Also, notice how the cursor is in the hellotut.c window,
   and the cursor in this window is hollow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type "C-x o" to move the cursor back to this window.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type "C-x 1" to make this window take up the whole frame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type "C-x b RET" to switch to viewing hellotut.c again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Congratulations for finding your way back here with another
   "C-x b RET"!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Eventually you may find you never leave Emacs, just keep opening new
buffers within it and switching between them.  Goodbye, mouse!&lt;/p&gt;
&lt;h2&gt;Help&lt;/h2&gt;
&lt;p&gt;Did I mention Emacs has a great help system?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-h ?&amp;quot; - list all help commands
&amp;quot;C-h t&amp;quot; - Emacs tutorial
&amp;quot;C-h b&amp;quot; - list all key bindings
&amp;quot;C-h k&amp;quot; - help for a particular key binding
&amp;quot;C-h f&amp;quot; - help for a function
&amp;quot;C-h a&amp;quot; - help apropos - keyword search
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is one of my favorites to explore all the functions available in Emacs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-h f TAB&amp;quot; - list all functions in emacs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh, and you can open man pages in emacs too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;M-x man&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Emacs has its own manual system called info, which is extensive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-h i&amp;quot; - list all functions in emacs
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Shells&lt;/h2&gt;
&lt;p&gt;You can run interactive shells inside emacs buffers.  That means you
can cut-and-paste from example code into shells, from shells to your
log, etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;M-x shell&amp;quot; - start a new shell in a buffer named *shell*
&amp;quot;M-x newshell&amp;quot; - start a new shell in a buffer with a new name

&amp;quot;M-!&amp;quot;     - put shell command output in new buffer
&amp;quot;C-u M-!&amp;quot; - insert shell command output at cursor
&amp;quot;M-|&amp;quot;     - pipe region through command, output in new buffer
&amp;quot;C-u M-|&amp;quot; - pipe region through command, output at cursor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Emacs shells are a little different from regular terminals: Your
cursor is free to move off the command line, so you can move, select,
and search in them like any other buffer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-x h&amp;quot;, &amp;quot;C-w&amp;quot; - cut all text (clear the buffer)
&amp;quot;M-&amp;gt;&amp;quot; - end of buffer (last command line)
&amp;quot;M-p&amp;quot; - previous command (command history)
&amp;quot;M-r&amp;quot; - regexp search backwards through command history
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Emacs shells also track the current directory, so when you do "C-x f"
to open a file, it's relative to the shell's current directory.&lt;/p&gt;
&lt;p&gt;Emacs shells are dumb.  They don't do terminal emulation.  If you
really need terminal capabilities for curses, use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;M-x term&amp;quot; - start a shell in terminal mode
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Emacs can open and edit files on remote hosts, and open shells there
too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;M-x ssh&amp;quot; - start a shell ssh&amp;#39;ed to user@host

&amp;quot;C-x C-f /ssh:USER@HOST:PATH&amp;quot; open a file via ssh to HOST

&amp;quot;C-x C-f /sudo::PATH&amp;quot; open a file with sudo, so you can edit root-writable files with tramp
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Compilation&lt;/h2&gt;
&lt;p&gt;Compilation buffers work like grep, Emacs runs a command into a buffer then parses the results to iterate over errors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;M-x compile&amp;quot; - run make in a buffer
&amp;quot;M-x `&amp;quot; - next-error - jump to next error
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Try it now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. &amp;quot;M-x compile&amp;quot; - oops! you should see an error in hellotut.c
2. &amp;quot;M-x `&amp;quot; - will open the file hellotut.c at the error
3. comment out &amp;quot;Intentional error here!&amp;quot;
4. &amp;quot;M-x compile&amp;quot; - compiled OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Amusements&lt;/h2&gt;
&lt;p&gt;Did I mention emacs is a lisp OS?  Yes, there are games:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;M-x life&amp;quot;
&amp;quot;M-x pong&amp;quot;
&amp;quot;M-x snake&amp;quot;
&amp;quot;M-x hanoi&amp;quot;
&amp;quot;M-x doctor&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Buffers, Windows and Frames&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-x f&amp;quot; - open file in a new buffer
&amp;quot;C-x 4 f&amp;quot; - open file in buffer, split window
&amp;quot;C-x k&amp;quot; - kill buffer (close file)

&amp;quot;C-x b&amp;quot; - switch to buffer
&amp;quot;C-x o&amp;quot; - move cursor to other window
&amp;quot;C-x 1&amp;quot; - make current buffer fill window

&amp;quot;C-x C-b&amp;quot; - list all buffers

&amp;quot;C-x 4 b&amp;quot; - switch to buffer, split window vertically
&amp;quot;C-x 3 b&amp;quot; - switch to buffer, split window horizontally
&amp;quot;C-x 5 b&amp;quot; - switch to buffer in new frame
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Selecting text&lt;/h2&gt;
&lt;p&gt;Cutting, copying, and pasting&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-SPC&amp;quot; - Set the mark.  That&amp;#39;s used for selecting a range of text
          between the mark and the cursor

&amp;quot;C-x h&amp;quot; - select the whole buffer.

&amp;quot;C-w&amp;quot; - cut text between cursor and mark.  Sorry, Emacs was
        invented before Macintosh, so it bound the now common C-x
        and C-v to other functions.

&amp;quot;M-w&amp;quot; - copy text between point and mark

&amp;quot;C-y&amp;quot; - paste text

&amp;quot;C-x r k&amp;quot; - cut a rectangle of text between cursor and mark
&amp;quot;C-x r y&amp;quot; - paste a rectangle of text
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Searching&lt;/h2&gt;
&lt;p&gt;The i in isearch is for incremental.  Emacs will search and highlight
matches as you type.  Type "C-r" to search backwards.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-s&amp;quot; - isearch
&amp;quot;C-s C-r&amp;quot; - isearch backwards
&amp;quot;M-C-s&amp;quot; - regexp isearch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Query-replace prompts for each replacement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;C-r&amp;quot; - query replace regexp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even better, you can run grep into a buffer, then step through the
results, jumping to matches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;M-x grep&amp;quot; - run grep over files in the current directory
&amp;quot;M-x grep-find&amp;quot; - run grep recursively into subdirs
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Modes&lt;/h2&gt;
&lt;p&gt;Each buffer has a mode for the type of file it contains.  The mode
controls syntax highlighting, indentation rules, and mode-specific
functions.&lt;/p&gt;
&lt;p&gt;For example, if you open hellotut.c again, you'll be in c++-mode.  Try
these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &amp;quot;M-\&amp;quot; - indent region
  &amp;quot;)&amp;quot;, &amp;quot;}&amp;quot;, &amp;quot;]&amp;quot; - blink matching parens
  &amp;quot;C-h m&amp;quot; - help on current mode
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;What Next?&lt;/h2&gt;
&lt;p&gt;Finger exercises :).  Then, read the tutorial and explore the info
system with "C-h i".  Also see &lt;a href="http://www.gnu.org/software/emacs/tour/"&gt;A Guided Tour of
Emacs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Questions, comments, and pull requests are welcome!  I'd like to hear
how Emacs worked out for you.&lt;/p&gt;
&lt;p&gt;Noel Burton-Krahn &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#110;&amp;#111;&amp;#101;&amp;#108;&amp;#64;&amp;#98;&amp;#117;&amp;#114;&amp;#116;&amp;#111;&amp;#110;&amp;#45;&amp;#107;&amp;#114;&amp;#97;&amp;#104;&amp;#110;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#110;&amp;#111;&amp;#101;&amp;#108;&amp;#64;&amp;#98;&amp;#117;&amp;#114;&amp;#116;&amp;#111;&amp;#110;&amp;#45;&amp;#107;&amp;#114;&amp;#97;&amp;#104;&amp;#110;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
  Aug 27, 2015&lt;/p&gt;</content></entry><entry><title>Core of Darkness</title><link href="http://burton-krahn.com/core-of-darkness.html" rel="alternate"></link><published>2006-08-11T00:00:00-07:00</published><updated>2006-08-11T00:00:00-07:00</updated><author><name>Donald Chan</name></author><id>tag:burton-krahn.com,2006-08-11:/core-of-darkness.html</id><summary type="html">&lt;p&gt;Coopalpyse Now&lt;/p&gt;</summary><content type="html">&lt;p&gt;A young Co-op is sent down I-5 to "downsize" Don Knuth because his
methods are unsound. The co-op student is well trained in .Net, XML,
and Design Patterns, and he's sent to off Knuth for his heretical
non-standards-base approach (and specifically, the MMIX-fallacy based
on --gasp-- assembly language!).&lt;/p&gt;
&lt;p&gt;UVic, shit.  Eight years into my degree, and I'm still trying to get
through calculus.  My girlfriend graduated last year and left me for a
commerce major.  Every semester I spend on this campus I get weaker.
I just wanted one co-op term that wasn't testing or writing
documentation.&lt;/p&gt;
&lt;p&gt;At his briefing, the co-op student is handed a listing of an APL
program by the chief architect of the .NET CLR, while the Spec Lead of
the Java Community Process group looks on. An unnamed representative
from W3C is sitting in the background.&lt;/p&gt;
&lt;p&gt;Q: "Are you familiar with this language, son?"&lt;/p&gt;
&lt;p&gt;A: "No sir"&lt;/p&gt;
&lt;p&gt;(The W3C guy gives the student a significant look)&lt;/p&gt;
&lt;p&gt;Q: "What about Forth?"&lt;/p&gt;
&lt;p&gt;A: "Sir, I have never participated in any projects utilizing these
languages. Furthermore, if I had in fact participated in any such
projects, I would not be at liberty to speak of them at this
time. Sir."&lt;/p&gt;
&lt;p&gt;While the co-op student is being driven down the I-5 in an SUV, he
reviews Knuth's dossier and ruminates "this guy wrote two volumes of
The Art of Computer Programming, then gave it all up to implement
TeX. Back to coding, at his age? What balls. I tried to write a
validating XML processor when I was 18 and it damn near killed me."&lt;/p&gt;
&lt;p&gt;To get directions to Knuth, Willard is sent to see Bill "Kernel"
Kiljoy, a former Sun VP, now with Microsoft. Kiljoy is in the process
of reorganizing a software company recently acquired by Microsoft.
Willard meets Kiljoy on-site, where half the programming staff has
been given pink slips and the other half is being indoctrinated in the
Microsoft development style.  Flunkies scurry everywhere, installing
hardware and software, while hapless employees look on.&lt;/p&gt;
&lt;p&gt;FLUNKY: The network topology's pretty hairy here, sir. Some of it's
old 10 megabit coax. There?s even a 4 megabit token ring. I don't know
where we'll get the bandwidth to set up VoIP.&lt;/p&gt;
&lt;p&gt;KILJOY: We can get rid of some of these Unix workstations for a start.&lt;/p&gt;
&lt;p&gt;Kiljoy yanks an ethernet cable out of the back of a nearby computer.&lt;/p&gt;
&lt;p&gt;HAPLESS EMPLOYEE: Hey, that's Charlie's network connection&lt;/p&gt;
&lt;p&gt;KILJOY: So what? Charlie won't surf!&lt;/p&gt;
&lt;p&gt;A new horde of flunkies arrive and begin to install Windows Vista on
all the computers in the office. Kiljoy starts up Visual Studio on a
computer and several minutes later, source code is displayed.&lt;/p&gt;
&lt;p&gt;KILJOY: You see that? Do you see that? Hungarian notation, son. No
other coding style in the world looks like that. I love to look at C#
in the morning. You know, one time we migrated some BSD software to
.NET.  When it was all done I reviewed the code. I didn't understand
one line, not one stinkin' expression. It was the style, you know that
verbose COBOL-like style, the whole program. It looked like... like
the Reverse-injected Victory Pattern. (He casts an avuncular glance at
Willard and winks). Some day this software's going to ship.&lt;/p&gt;
&lt;p&gt;In the boardroom waiting for Knuth, the VP of Marketing explains
Knuth's brilliance&lt;/p&gt;
&lt;p&gt;VPM: no mantissa. You can't address memory, you can't index into
     process space, with, like you know, floating point numbers. What
     byte do you get with 2.5E-1, 3.75E-1, what are you gonna do when
     you reach the end of allocated storage or something -- that's
     array subscripting, OK?&lt;/p&gt;
&lt;p&gt;Never leave the cubicle, absolutely goddamn right, unless you're going
all the way.  Knuth left the cubicle, he wrote the whole fucking
program.&lt;/p&gt;</content></entry></feed>